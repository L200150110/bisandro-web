{"version":3,"sources":["App.js","index.js"],"names":["className","App","webcamRef","useRef","useState","hasil","setHasil","runCoco","a","tf","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","obj","predict","print","console","log","arraySync","v","dataSync","vv","argMax","useEffect","ref","muted","videoConstraints","facingMode","exact","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4YAaMA,G,OAAY,CAAC,MAAO,MAAO,WAAY,OAAQ,OAAQ,OAAQ,UA4JtDC,MA1Jf,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAGaC,mBAAS,IAHtB,mBAGNC,EAHM,KAGCC,EAHD,KAUPC,EAAO,uCAAG,4BAAAC,EAAA,sEAWIC,IAGhB,iDAdY,OAWRC,EAXQ,OA0BdC,aAAY,WACVC,EAAOF,KACN,KA5BW,2CAAH,qDAgCPE,EAAM,uCAAG,WAAMF,GAAN,iCAAAF,EAAA,sDAGkB,qBAAtBN,EAAUW,SACK,OAAtBX,EAAUW,SAC6B,IAAvCX,EAAUW,QAAQC,MAAMC,aAIlBD,EAAQZ,EAAUW,QAAQC,MAC1BE,EAAad,EAAUW,QAAQC,MAAME,WACrCC,EAAcf,EAAUW,QAAQC,MAAMG,YAG5Cf,EAAUW,QAAQC,MAAMI,MAAQF,EAChCd,EAAUW,QAAQC,MAAMK,OAASF,EAO3BG,EAAMX,IAAWY,WAAWP,GAE5BQ,EAAUb,IAASc,eAAeH,EAAK,CAAC,IAAK,MAG7CI,EAASF,EAAQG,KAAK,SACtBC,EAAWF,EAAOG,WAAW,IAM7BC,EAAMlB,EAAImB,QAAQH,IAQpBI,QAEJC,QAAQC,IAAIJ,EAAIK,YAAY,IAEtBC,EAAIzB,IAAUmB,EAAIO,YAClBC,EAAKF,EAAEG,SAASF,WAAW,GACjCJ,QAAQC,IAAII,GACZL,QAAQC,IAAIhC,EAAUoC,IACtBL,QAAQC,IAAI,2CACZ1B,EAAS,CAACN,EAAUoC,GAAKR,EAAIK,YAAY,GAAGG,KAuB5C3B,IAAWW,GACXX,IAAWa,GACXb,IAAWe,GACXf,IAAWiB,GACXjB,IAAWmB,IA9EA,2CAAH,sDAsFZ,OAJAU,qBAAU,WACR/B,MACC,IAGD,yBAAKP,UAAU,OACb,4BACGK,EAAM,GADT,KACeA,EAAM,GADrB,KAGA,kBAAC,IAAD,CACEkC,IAAKrC,EACLsC,OAAO,EACPC,iBAAkB,CAAEC,WAAY,CAAEC,MAAO,gBACzCC,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRjC,MAAO,WC3JjBkC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.42cc3c56.chunk.js","sourcesContent":["// Import dependencies\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\n// import { nextFrame } from \"@tensorflow/tfjs\";\n// 2. TODO - Import drawing utility here\n// e.g. import { drawRect } from \"./utilities\";\n// import { drawRect } from \"./utilities\";\n// import axios from \"axios\";\n\n// import UseScript from \"./UseScript\";\n\nconst className = [\"Aku\", \"Apa\", \"Apakabar\", \"Baik\", \"Kamu\", \"Nama\", \"Siapa\"];\n\nfunction App() {\n  const webcamRef = useRef(null);\n  // const canvasRef = useRef(null);\n  const [hasil, setHasil] = useState([]);\n\n  // UseScript(\n  //   \"https://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.10/jquery-ui.min.js\"\n  // );\n\n  // Main function\n  const runCoco = async () => {\n    // 3. TODO - Load network\n    // e.g. const net = await cocossd.load();\n    // https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json\n    // https://bisindo-surakarta.com/uploads/model/new/model.json\n\n    // const net = await tf.loadGraphModel(\n    //   \"http://bisandro.com//uploads/model/model.json\"\n    //   // \"https://bisindo-surakarta.com/uploads/model/model.json\"\n    // );\n\n    const net = await tf.loadLayersModel(\n      // \"http://bisandro.com//uploads/model/model.json\"\n      // \"https://bisindo-surakarta.com/uploads/model/model.json\"\n      \"https://bisandro.com/uploads/model/model.json\"\n      // \"http://bisandro.com/uploads/rescale/model.json\"\n      // \"http://localhost:1234\"\n      // \"/home/none/Project/bisandro-rest/mobile/ReactComputerVisionTemplate/src/layermodel/model/model.json\"\n    );\n    // console.log(net)\n\n    // axios.get('http://localhost:1234').then(res=>{\n    //   console.log(res);\n    // });\n\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 500);\n    // detect(net);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // console.log(webcamRef.current.video.readyState)\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      // canvasRef.current.width = videoWidth;\n      // canvasRef.current.height = videoHeight;\n\n      // 4. TODO - Make Detections\n      const img = tf.browser.fromPixels(video);\n      // console.log(img)\n      const resized = tf.image.resizeBilinear(img, [180, 180]);\n      // resized.shape = [null, 640, 480, 3]\n      // console.log(resized)\n      const casted = resized.cast(\"int32\");\n      const expanded = casted.expandDims(0);\n      // console.log(expanded)\n      // expanded.shape = [null, 640, 480, 3]\n      // const obj = await net.executeAsync(expanded);\n      // const obj = await net.predict(expanded);\n      // const obj = \"ASJGD\";\n      const obj = net.predict(expanded);\n      // console.log(\"agdshs\")\n      //   const model = tf.sequential({\n      //     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n      //  });\n      //  const obj = model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n\n      // console.log()\n      obj.print();\n      // obj.softmax().print()\n      console.log(obj.arraySync()[0]);\n      // obj.arraySync()[0].argMax().print()\n      const v = tf.tensor(obj.dataSync());\n      const vv = v.argMax().dataSync()[0];\n      console.log(vv);\n      console.log(className[vv]);\n      console.log(\"SKIP-----------------------------------\");\n      setHasil([className[vv], obj.arraySync()[0][vv]]);\n\n      // const boxes = await obj[1].array();\n      // const classes = await obj[2].array();\n      // const scores = await obj[4].array();\n\n      // Draw mesh\n      // const ctx = canvasRef.current.getContext(\"2d\");\n\n      // // 5. TODO - Update drawing utility\n      // // drawSomething(obj, ctx)\n      // requestAnimationFrame(() => {\n      //   drawRect(\n      //     boxes[0],\n      //     classes[0],\n      //     scores[0],\n      //     0.8,\n      //     videoWidth,\n      //     videoHeight,\n      //     ctx\n      //   );\n      // });\n\n      tf.dispose(img);\n      tf.dispose(resized);\n      tf.dispose(casted);\n      tf.dispose(expanded);\n      tf.dispose(obj);\n    }\n  };\n\n  useEffect(() => {\n    runCoco();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h5>\n        {hasil[0]} ({hasil[1]})\n      </h5>\n      <Webcam\n        ref={webcamRef}\n        muted={true}\n        videoConstraints={{ facingMode: { exact: \"environment\" } }}\n        style={{\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: \"90%\"\n          // top: 0\n          // height: \"40%\"\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}